# ======================================
# SAFER OPTIMIZED DOCKERFILE 
# (Incremental improvements with minimal risk)
# ======================================

# Build stage - keep current approach but optimize
FROM maven:3.9-eclipse-temurin-17 AS build

WORKDIR /app

# Copy pom.xml and download dependencies (cached layer)
COPY pom.xml .
RUN mvn dependency:go-offline -q

# Copy source code and build (keep current approach)
COPY src src
RUN mvn clean package -DskipTests -q

# ======================================
# RUNTIME STAGE - SAFER OPTIMIZATIONS
# ======================================

# Use Alpine JRE instead of distroless (has shell + curl)
FROM eclipse-temurin:17-jre-alpine

WORKDIR /app

# Install curl for health check (smaller Alpine packages)
RUN apk add --no-cache curl

# Create non-root user (keep current security model)
RUN addgroup -S -g 1001 spring && \
    adduser -S -u 1001 -G spring spring

# Copy the built JAR from build stage
COPY --from=build /app/target/*.jar app.jar

# Change ownership to spring user
RUN chown spring:spring app.jar

# Switch to non-root user
USER spring:spring

# Expose port
EXPOSE 8080

# Keep existing health check (compatible)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/actuator/health || exit 1

# Optimized but safe JVM options (no experimental features)
ENV JAVA_OPTS="\
-XX:+UseContainerSupport \
-XX:InitialRAMPercentage=50.0 \
-XX:MaxRAMPercentage=75.0 \
-XX:+UseG1GC \
-XX:MaxGCPauseMillis=100 \
-XX:+UseStringDeduplication \
-Dspring.jmx.enabled=false \
-Dspring.output.ansi.enabled=NEVER \
-Djava.security.egd=file:/dev/./urandom"

# Keep current entrypoint approach
ENTRYPOINT ["sh", "-c", "java $JAVA_OPTS -jar app.jar"]
